<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OnionSeed.Data</name>
    </assembly>
    <members>
        <member name="T:OnionSeed.Data.AsyncCommandServiceExtensions">
            <summary>
            Contains extension methods for <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.AsyncCommandServiceExtensions.Catch``3(OnionSeed.Data.IAsyncCommandService{``0,``1},System.Func{``2,System.Boolean})">
            <summary>
            Wraps the given <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> in a <see cref="T:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3"/>.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> to be wrapped.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <returns>A new <see cref="T:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3"/> wrapping the given <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Data.AsyncQueryServiceExtensions">
            <summary>
            Contains extension methods for <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.AsyncQueryServiceExtensions.Catch``3(OnionSeed.Data.IAsyncQueryService{``0,``1},System.Func{``2,System.Boolean})">
            <summary>
            Wraps the given <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/> in a <see cref="T:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3"/>.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/> to be wrapped.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <returns>A new <see cref="T:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3"/> wrapping the given <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Data.AsyncRepositoryExtensions">
            <summary>
            Contains extension methods for <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.AsyncRepositoryExtensions.Catch``3(OnionSeed.Data.IAsyncRepository{``0,``1},System.Func{``2,System.Boolean})">
            <summary>
            Wraps the given <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> in a <see cref="T:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3"/>.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> to be wrapped.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <returns>A new <see cref="T:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3"/> wrapping the given <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Data.AsyncUnitOfWorkExtensions">
            <summary>
            Contains extension methods for <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.AsyncUnitOfWorkExtensions.Catch``1(OnionSeed.Data.IAsyncUnitOfWork,System.Func{``0,System.Boolean})">
            <summary>
            Wraps the given <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> in a <see cref="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkExceptionHandlerDecorator`1"/>.
            </summary>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> to be wrapped.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <returns>A new <see cref="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkExceptionHandlerDecorator`1"/> wrapping the given <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Data.CommandServiceExtensions">
            <summary>
            Contains extension methods for <see cref="T:OnionSeed.Data.ICommandService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.CommandServiceExtensions.Catch``3(OnionSeed.Data.ICommandService{``0,``1},System.Func{``2,System.Boolean})">
            <summary>
            Wraps the given <see cref="T:OnionSeed.Data.ICommandService`2"/> in a <see cref="T:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3"/>.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
            <param name="inner">The <see cref="T:OnionSeed.Data.ICommandService`2"/> to be wrapped.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <returns>A new <see cref="T:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3"/> wrapping the given <see cref="T:OnionSeed.Data.ICommandService`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2">
            <inheritdoc/>
            <summary>
            The base class for decorators for <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.#ctor(OnionSeed.Data.IAsyncCommandService{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> to be decorated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.Inner">
            <summary>
            Gets a reference to the <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> being decorated.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.AddOrUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.RemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.RemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.TryAddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.TryUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.TryRemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceDecorator`2.TryRemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3">
            <inheritdoc/>
            <summary>
            Wraps a given <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> and handles any exceptions of the specified type.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.#ctor(OnionSeed.Data.IAsyncCommandService{`0,`1},System.Func{`2,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> to be decorated.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.Handler">
            <summary>
            Gets a reference to the handler that will be called when an exception is caught.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.AddOrUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.RemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.RemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.TryAddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.TryUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.TryRemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceExceptionHandlerDecorator`3.TryRemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2">
            <inheritdoc/>
            <summary>
            Decorates an <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>, mirroring commands to a secondary, "tap" <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>.
            </summary>
            <remarks>This decorator functions like a parallel network tap: commands are executed against the inner command service
            and the tap command service at the same time. This can be more performant than the regular, sequential type of tap;
            but it is also inherently riskier because if an exception is thrown from either command service, they can become out-of-sync.
            <para>Any values returned or exceptions thrown from the tap command service are ignored.</para>
            <para>This essentially allows for the creation of a duplicate copy of the data,
            and is intended to be used for things like caching, backup, or reporting.</para></remarks>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.#ctor(OnionSeed.Data.IAsyncCommandService{`0,`1},OnionSeed.Data.IAsyncCommandService{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>, where commands will be duplicated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.#ctor(OnionSeed.Data.IAsyncCommandService{`0,`1},OnionSeed.Data.IAsyncCommandService{`0,`1},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>, where commands will be duplicated.</param>
            <param name="logger">The logger where tap exceptions should be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.Tap">
            <summary>
            Gets a reference to the tap <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.AddOrUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.RemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.RemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.TryAddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.TryUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.TryRemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceParallelTapDecorator`2.TryRemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2">
            <inheritdoc/>
            <summary>
            Decorates an <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>, mirroring commands to a secondary, "tap" <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>.
            </summary>
            <remarks>This decorator functions like a network tap: commands are executed first against the inner command service;
            if they succeed, they are then executed against the tap command service as well.
            <para>Any values returned or exceptions thrown from the tap command service are ignored.</para>
            <para>This essentially allows for the creation of a duplicate copy of the data,
            and is intended to be used for things like caching, backup, or reporting.</para></remarks>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.#ctor(OnionSeed.Data.IAsyncCommandService{`0,`1},OnionSeed.Data.IAsyncCommandService{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>, where commands will be duplicated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.#ctor(OnionSeed.Data.IAsyncCommandService{`0,`1},OnionSeed.Data.IAsyncCommandService{`0,`1},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>, where commands will be duplicated.</param>
            <param name="logger">The logger where tap exceptions should be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.Tap">
            <summary>
            Gets a reference to the tap <see cref="T:OnionSeed.Data.IAsyncCommandService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.AddOrUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.RemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.RemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.TryAddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.TryUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.TryRemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncCommandServiceTapDecorator`2.TryRemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncQueryServiceDecorator`2">
            <inheritdoc/>
            <summary>
            The base class for decorators for <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceDecorator`2.#ctor(OnionSeed.Data.IAsyncQueryService{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncQueryServiceDecorator`2"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/> to be decorated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncQueryServiceDecorator`2.Inner">
            <summary>
            Gets a reference to the <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/> being decorated.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceDecorator`2.GetCountAsync">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceDecorator`2.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceDecorator`2.GetByIdAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceDecorator`2.TryGetByIdAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3">
            <inheritdoc/>
            <summary>
            Wraps a given <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/> and handles any exceptions of the specified type.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3.#ctor(OnionSeed.Data.IAsyncQueryService{`0,`1},System.Func{`2,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncQueryService`2"/> to be decorated.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3.Handler">
            <summary>
            Gets a reference to the handler that will be called when an exception is caught.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3.GetCountAsync">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3.GetByIdAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncQueryServiceExceptionHandlerDecorator`3.TryGetByIdAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2">
            <inheritdoc/>
            <summary>
            The base class for decorators for <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.#ctor(OnionSeed.Data.IAsyncRepository{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> to be decorated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.Inner">
            <summary>
            Gets a reference to the <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> being decorated.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.GetCountAsync">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.GetByIdAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.TryGetByIdAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.AddOrUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.RemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.RemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.TryAddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.TryUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.TryRemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryDecorator`2.TryRemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3">
            <inheritdoc/>
            <summary>
            Wraps a given <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> and handles any exceptions of the specified type.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.#ctor(OnionSeed.Data.IAsyncRepository{`0,`1},System.Func{`2,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> to be decorated.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.Handler">
            <summary>
            Gets a reference to the handler that will be called when an exception is caught.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.GetCountAsync">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.GetByIdAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.TryGetByIdAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.AddOrUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.RemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.RemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.TryAddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.TryUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.TryRemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryExceptionHandlerDecorator`3.TryRemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2">
            <inheritdoc/>
            <summary>
            Decorates an <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>, mirroring commands to a secondary, "tap" <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>.
            </summary>
            <remarks>This decorator functions like a parallel network tap: commands are executed against the inner repository
            and the tap repository at the same time. This can be more performant than the regular, sequential type of tap;
            but it is also inherently riskier because if an exception is thrown from either repository, they can become out-of-sync.
            <para>Any values returned or exceptions thrown from the tap repository are ignored.</para>
            <para>This essentially allows for the creation of a duplicate copy of the data,
            and is intended to be used for things like caching, backup, or reporting.</para></remarks>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.#ctor(OnionSeed.Data.IAsyncRepository{`0,`1},OnionSeed.Data.IAsyncRepository{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>, where commands will be duplicated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.#ctor(OnionSeed.Data.IAsyncRepository{`0,`1},OnionSeed.Data.IAsyncRepository{`0,`1},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>, where commands will be duplicated.</param>
            <param name="logger">The logger where tap exceptions should be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.Tap">
            <summary>
            Gets a reference to the tap <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.AddOrUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.RemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.RemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.TryAddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.TryUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.TryRemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryParallelTapDecorator`2.TryRemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2">
            <inheritdoc/>
            <summary>
            Decorates an <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>, mirroring commands to a secondary, "tap" <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>.
            </summary>
            <remarks>This decorator functions like a network tap: commands are executed first against the inner repository;
            if they succeed, they are then executed against the tap repository as well.
            <para>Any values returned or exceptions thrown from the tap repository are ignored.</para>
            <para>This essentially allows for the creation of a duplicate copy of the data,
            and is intended to be used for things like caching, backup, or reporting.</para></remarks>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.#ctor(OnionSeed.Data.IAsyncRepository{`0,`1},OnionSeed.Data.IAsyncRepository{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>, where commands will be duplicated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.#ctor(OnionSeed.Data.IAsyncRepository{`0,`1},OnionSeed.Data.IAsyncRepository{`0,`1},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncRepository`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>, where commands will be duplicated.</param>
            <param name="logger">The logger where tap exceptions should be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.Tap">
            <summary>
            Gets a reference to the tap <see cref="T:OnionSeed.Data.IAsyncRepository`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.AddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.AddOrUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.UpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.RemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.RemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.TryAddAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.TryUpdateAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.TryRemoveAsync(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncRepositoryTapDecorator`2.TryRemoveAsync(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkDecorator">
            <inheritdoc/>
            <summary>
            The base class for decorators for <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkDecorator.#ctor(OnionSeed.Data.IAsyncUnitOfWork)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkDecorator"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> to be decorated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncUnitOfWorkDecorator.Inner">
            <summary>
            Gets a reference to the <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> being decorated.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkDecorator.CommitAsync">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkExceptionHandlerDecorator`1">
            <inheritdoc/>
            <summary>
            Wraps a given <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> and handles any exceptions of the specified type.
            </summary>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkExceptionHandlerDecorator`1.#ctor(OnionSeed.Data.IAsyncUnitOfWork,System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkExceptionHandlerDecorator`1"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> to be decorated.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncUnitOfWorkExceptionHandlerDecorator`1.Handler">
            <summary>
            Gets a reference to the handler that will be called when an exception is caught.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkExceptionHandlerDecorator`1.CommitAsync">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkParallelTapDecorator">
            <inheritdoc/>
            <summary>
            Decorates an <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>, mirroring commands to a secondary, "tap" <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>.
            </summary>
            <remarks>This decorator functions like a parallel network tap: commands are executed against the inner unit of work
            and the tap unit of work at the same time. This can be more performant than the regular, sequential type of tap;
            but it is also inherently riskier because if an exception is thrown from either unit of work, they can become out-of-sync.
            <para>Any values returned or exceptions thrown from the tap unit of work are ignored.</para>
            <para>This essentially allows for the creation of a duplicate copy of the data,
            and is intended to be used for things like caching, backup, or reporting.</para></remarks>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkParallelTapDecorator.#ctor(OnionSeed.Data.IAsyncUnitOfWork,OnionSeed.Data.IAsyncUnitOfWork)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkParallelTapDecorator"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>, where commands will be mirrored.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkParallelTapDecorator.#ctor(OnionSeed.Data.IAsyncUnitOfWork,OnionSeed.Data.IAsyncUnitOfWork,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkParallelTapDecorator"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>, where commands will be mirrored.</param>
            <param name="logger">The logger where tap exceptions should be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncUnitOfWorkParallelTapDecorator.Tap">
            <summary>
            Gets a reference to the tap <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkParallelTapDecorator.CommitAsync">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkTapDecorator">
            <inheritdoc/>
            <summary>
            Decorates an <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>, mirroring commands to a secondary, "tap" <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>.
            </summary>
            <remarks>This decorator functions like a network tap: commands are executed first against the inner unit of work;
            if they succeed, they are then executed against the tap unit of work as well.
            <para>Any values returned or exceptions thrown from the tap unit of work are ignored.</para>
            <para>This essentially allows for the creation of a duplicate copy of the data,
            and is intended to be used for things like caching, backup, or reporting.</para></remarks>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkTapDecorator.#ctor(OnionSeed.Data.IAsyncUnitOfWork,OnionSeed.Data.IAsyncUnitOfWork)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkTapDecorator"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>, where commands will be mirrored.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkTapDecorator.#ctor(OnionSeed.Data.IAsyncUnitOfWork,OnionSeed.Data.IAsyncUnitOfWork,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.AsyncUnitOfWorkTapDecorator"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>, where commands will be mirrored.</param>
            <param name="logger">The logger where tap exceptions should be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.AsyncUnitOfWorkTapDecorator.Tap">
            <summary>
            Gets a reference to the tap <see cref="T:OnionSeed.Data.IAsyncUnitOfWork"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.AsyncUnitOfWorkTapDecorator.CommitAsync">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.CommandServiceDecorator`2">
            <inheritdoc/>
            <summary>
            The base class for decorators for <see cref="T:OnionSeed.Data.ICommandService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.#ctor(OnionSeed.Data.ICommandService{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.CommandServiceDecorator`2"/> class,
            decorating the given <see cref="T:OnionSeed.Data.ICommandService`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.ICommandService`2"/> to be decorated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.CommandServiceDecorator`2.Inner">
            <summary>
            Gets a reference to the <see cref="T:OnionSeed.Data.ICommandService`2"/> being decorated.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.AddOrUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.Update(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.TryUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceDecorator`2.TryRemove(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3">
            <inheritdoc/>
            <summary>
            Wraps a given <see cref="T:OnionSeed.Data.ICommandService`2"/> and handles any exceptions of the specified type.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.#ctor(OnionSeed.Data.ICommandService{`0,`1},System.Func{`2,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3"/> class,
            decorating the given <see cref="T:OnionSeed.Data.ICommandService`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.ICommandService`2"/> to be decorated.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.Handler">
            <summary>
            Gets a reference to the handler that will be called when an exception is caught.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.AddOrUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.Update(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.TryUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceExceptionHandlerDecorator`3.TryRemove(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2">
            <inheritdoc/>
            <summary>
            Decorates an <see cref="T:OnionSeed.Data.ICommandService`2"/>, mirroring commands to a secondary, "tap" <see cref="T:OnionSeed.Data.ICommandService`2"/>.
            </summary>
            <remarks>This decorator functions like a network tap: commands are executed first against the inner command service;
            if they succeed, they are then executed against the tap command service as well.
            <para>Any values returned or exceptions thrown from the tap command service are ignored.</para>
            <para>This essentially allows for the creation of a duplicate copy of the data,
            and is intended to be used for things like caching, backup, or reporting.</para></remarks>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.#ctor(OnionSeed.Data.ICommandService{`0,`1},OnionSeed.Data.ICommandService{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.ICommandService`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.ICommandService`2"/>, where commands will be mirrored.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.#ctor(OnionSeed.Data.ICommandService{`0,`1},OnionSeed.Data.ICommandService{`0,`1},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.ICommandService`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.ICommandService`2"/>, where commands will be mirrored.</param>
            <param name="logger">The logger where tap exceptions should be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.Tap">
            <summary>
            Gets a reference to the tap <see cref="T:OnionSeed.Data.ICommandService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.AddOrUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.Update(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.TryUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.CommandServiceTapDecorator`2.TryRemove(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.QueryServiceDecorator`2">
            <inheritdoc/>
            <summary>
            The base class for decorators for <see cref="T:OnionSeed.Data.IQueryService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceDecorator`2.#ctor(OnionSeed.Data.IQueryService{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.QueryServiceDecorator`2"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IQueryService`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IQueryService`2"/> to be decorated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.QueryServiceDecorator`2.Inner">
            <summary>
            Gets a reference to the <see cref="T:OnionSeed.Data.IQueryService`2"/> being decorated.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceDecorator`2.GetCount">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceDecorator`2.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceDecorator`2.GetById(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceDecorator`2.TryGetById(`1,`0@)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3">
            <inheritdoc/>
            <summary>
            Wraps a given <see cref="T:OnionSeed.Data.IQueryService`2"/> and handles any exceptions of the specified type.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3.#ctor(OnionSeed.Data.IQueryService{`0,`1},System.Func{`2,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IQueryService`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IQueryService`2"/> to be decorated.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3.Handler">
            <summary>
            Gets a reference to the handler that will be called when an exception is caught.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3.GetCount">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3.GetById(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3.TryGetById(`1,`0@)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.RepositoryDecorator`2">
            <inheritdoc/>
            <summary>
            The base class for decorators for <see cref="T:OnionSeed.Data.IRepository`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.#ctor(OnionSeed.Data.IRepository{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.RepositoryDecorator`2"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IRepository`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IRepository`2"/> to be decorated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.RepositoryDecorator`2.Inner">
            <summary>
            Gets a reference to the <see cref="T:OnionSeed.Data.IRepository`2"/> being decorated.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.GetCount">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.GetById(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.TryGetById(`1,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.AddOrUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.Update(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.TryUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryDecorator`2.TryRemove(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3">
            <inheritdoc/>
            <summary>
            Wraps a given <see cref="T:OnionSeed.Data.IRepository`2"/> and handles any exceptions of the specified type.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.#ctor(OnionSeed.Data.IRepository{`0,`1},System.Func{`2,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IRepository`2"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IRepository`2"/> to be decorated.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.Handler">
            <summary>
            Gets a reference to the handler that will be called when an exception is caught.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.GetCount">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.GetById(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.TryGetById(`1,`0@)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.AddOrUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.Update(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.TryUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3.TryRemove(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.RepositoryTapDecorator`2">
            <inheritdoc/>
            <summary>
            Decorates an <see cref="T:OnionSeed.Data.IRepository`2"/>, mirroring commands to a secondary, "tap" <see cref="T:OnionSeed.Data.IRepository`2"/>.
            </summary>
            <remarks>This decorator functions like a network tap: commands are executed first against the inner repository;
            if they succeed, they are then executed against the tap repository as well.
            <para>Any values returned or exceptions thrown from the tap repository are ignored.</para>
            <para>This essentially allows for the creation of a duplicate copy of the data,
            and is intended to be used for things like caching, backup, or reporting.</para></remarks>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.#ctor(OnionSeed.Data.IRepository{`0,`1},OnionSeed.Data.IRepository{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.RepositoryTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IRepository`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IRepository`2"/>, where commands will be mirrored.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.#ctor(OnionSeed.Data.IRepository{`0,`1},OnionSeed.Data.IRepository{`0,`1},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.RepositoryTapDecorator`2"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IRepository`2"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IRepository`2"/>, where commands will be mirrored.</param>
            <param name="logger">The logger where tap exceptions should be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.Tap">
            <summary>
            Gets a reference to the tap <see cref="T:OnionSeed.Data.IRepository`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.AddOrUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.Update(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.TryAdd(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.TryUpdate(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.TryRemove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:OnionSeed.Data.Decorators.RepositoryTapDecorator`2.TryRemove(`1)">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.UnitOfWorkDecorator">
            <inheritdoc/>
            <summary>
            The base class for decorators for <see cref="T:OnionSeed.Data.IUnitOfWork"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.UnitOfWorkDecorator.#ctor(OnionSeed.Data.IUnitOfWork)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.UnitOfWorkDecorator"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IUnitOfWork"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IUnitOfWork"/> to be decorated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.UnitOfWorkDecorator.Inner">
            <summary>
            Gets a reference to the <see cref="T:OnionSeed.Data.IUnitOfWork"/> being decorated.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.UnitOfWorkDecorator.Commit">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.UnitOfWorkExceptionHandlerDecorator`1">
            <inheritdoc/>
            <summary>
            Wraps a given <see cref="T:OnionSeed.Data.IUnitOfWork"/> and handles any exceptions of the specified type.
            </summary>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.Decorators.UnitOfWorkExceptionHandlerDecorator`1.#ctor(OnionSeed.Data.IUnitOfWork,System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.UnitOfWorkExceptionHandlerDecorator`1"/> class,
            decorating the given <see cref="T:OnionSeed.Data.IUnitOfWork"/>.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IUnitOfWork"/> to be decorated.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.UnitOfWorkExceptionHandlerDecorator`1.Handler">
            <summary>
            Gets a reference to the handler that will be called when an exception is caught.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.UnitOfWorkExceptionHandlerDecorator`1.Commit">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.Decorators.UnitOfWorkTapDecorator">
            <inheritdoc/>
            <summary>
            Decorates an <see cref="T:OnionSeed.Data.IUnitOfWork"/>, mirroring commands to a secondary, "tap" <see cref="T:OnionSeed.Data.IUnitOfWork"/>.
            </summary>
            <remarks>This decorator functions like a network tap: commands are executed first against the inner unit of work;
            if they succeed, they are then executed against the tap unit of work as well.
            <para>Any values returned or exceptions thrown from the tap unit of work are ignored.</para>
            <para>This essentially allows for the creation of a duplicate copy of the data,
            and is intended to be used for things like caching, backup, or reporting.</para></remarks>
        </member>
        <member name="M:OnionSeed.Data.Decorators.UnitOfWorkTapDecorator.#ctor(OnionSeed.Data.IUnitOfWork,OnionSeed.Data.IUnitOfWork)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.UnitOfWorkTapDecorator"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IUnitOfWork"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IUnitOfWork"/>, where commands will be mirrored.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Data.Decorators.UnitOfWorkTapDecorator.#ctor(OnionSeed.Data.IUnitOfWork,OnionSeed.Data.IUnitOfWork,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:OnionSeed.Data.Decorators.UnitOfWorkTapDecorator"/> class.
            </summary>
            <param name="inner">The <see cref="T:OnionSeed.Data.IUnitOfWork"/> to be decorated.</param>
            <param name="tap">The tap <see cref="T:OnionSeed.Data.IUnitOfWork"/>, where commands will be mirrored.</param>
            <param name="logger">The logger where tap exceptions should be written.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="tap"/> is <c>null</c>.</exception>
        </member>
        <member name="P:OnionSeed.Data.Decorators.UnitOfWorkTapDecorator.Tap">
            <summary>
            Gets a reference to the tap <see cref="T:OnionSeed.Data.IUnitOfWork"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.Decorators.UnitOfWorkTapDecorator.Commit">
            <inheritdoc/>
        </member>
        <member name="T:OnionSeed.Data.IAsyncCommandService`2">
            <summary>
            Defines a mechanism that can be used to asynchronously update entities in a data store.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.IAsyncCommandService`2.AddAsync(`0)">
            <summary>
            Adds an entity to the data store.
            </summary>
            <param name="item">The entity to be added to the data store.</param>
            <returns>A task representing the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> was not assigned a unique identity value.</exception>
            <exception cref="T:System.ArgumentException">The data store already contains an entity with a matching unique identity value.</exception>
        </member>
        <member name="M:OnionSeed.Data.IAsyncCommandService`2.AddOrUpdateAsync(`0)">
            <summary>
            Adds an entity to the data store, or updates it if it already exists in the data store.
            </summary>
            <param name="item">The entity to be added to or updated in the data store.</param>
            <returns>A task representing the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> was not assigned a unique identity value.</exception>
        </member>
        <member name="M:OnionSeed.Data.IAsyncCommandService`2.UpdateAsync(`0)">
            <summary>
            Updates the specified entity in the data store.
            </summary>
            <param name="item">The entity to be updated in the data store.</param>
            <returns>A task representing the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The specified entity was not found in the data store.</exception>
        </member>
        <member name="M:OnionSeed.Data.IAsyncCommandService`2.RemoveAsync(`0)">
            <summary>
            Removes the given entity from the data store.
            </summary>
            <param name="item">The entity to be removed from the data store.</param>
            <returns>A task representing the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
            <remarks>If the given entity is not found in the data store, this method is a no-op.</remarks>
        </member>
        <member name="M:OnionSeed.Data.IAsyncCommandService`2.RemoveAsync(`1)">
            <summary>
            Removes the specified entity from the data store.
            </summary>
            <param name="id">The unique identity value of the entity to be removed from the data store.</param>
            <returns>A task representing the operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
            <remarks>If the specified entity is not found in the data store, this method is a no-op.</remarks>
        </member>
        <member name="M:OnionSeed.Data.IAsyncCommandService`2.TryAddAsync(`0)">
            <summary>
            Attempts to add an entity to the data store.
            </summary>
            <param name="item">The entity to be added to the data store.</param>
            <returns>A task representing the operation. Upon completion, it will contain
            <c>true</c> if the entity was added successfully; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
        </member>
        <member name="M:OnionSeed.Data.IAsyncCommandService`2.TryUpdateAsync(`0)">
            <summary>
            Attempts to update the specified entity in the data store.
            </summary>
            <param name="item">The entity to be updated in the data store.</param>
            <returns>A task representing the operation. Upon completion, it will contain
            <c>true</c> if the entity was updated successfully; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
        </member>
        <member name="M:OnionSeed.Data.IAsyncCommandService`2.TryRemoveAsync(`0)">
            <summary>
            Attempts to remove the given entity from the data store.
            </summary>
            <param name="item">The entity to be removed from the data store.</param>
            <returns>A task representing the operation. Upon completion, it will contain
            <c>true</c> if the entity was removed successfully, or <c>false</c> if it was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
            <remarks>If the given entity is not found in the data store, this method is a no-op.</remarks>
        </member>
        <member name="M:OnionSeed.Data.IAsyncCommandService`2.TryRemoveAsync(`1)">
            <summary>
            Attempts to remove the specified entity from the data store.
            </summary>
            <param name="id">The unique identity value of the entity to be removed from the data store.</param>
            <returns>A task representing the operation. Upon completion, it will contain
            <c>true</c> if the entity was removed successfully, or <c>false</c> if it was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
            <remarks>If the specified entity is not found in the data store, this method is a no-op.</remarks>
        </member>
        <member name="T:OnionSeed.Data.IAsyncQueryService`2">
            <summary>
            Defines a mechanism that can be used to asynchronously query entities from a data store.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.IAsyncQueryService`2.GetCountAsync">
            <summary>
            Gets the number of entities in the data store.
            </summary>
            <returns>A task representing the operation. Upon completion, it will contain
            the number of entities in the data store.</returns>
        </member>
        <member name="M:OnionSeed.Data.IAsyncQueryService`2.GetAllAsync">
            <summary>
            Begins an enumeration of all entities in the data store.
            </summary>
            <returns>A task representing the operation. Upon completion, it will contain
            an enumeration of all entities in the data store.</returns>
        </member>
        <member name="M:OnionSeed.Data.IAsyncQueryService`2.GetByIdAsync(`1)">
            <summary>
            Gets a specific entity from the data store by its unique identity value.
            </summary>
            <param name="id">The unique identity value of the entity.</param>
            <returns>A task representing the operation. Upon completion, it will contain
            the entity that has the given unique identity value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The specified unique identity value does not exist in the data store.</exception>
        </member>
        <member name="M:OnionSeed.Data.IAsyncQueryService`2.TryGetByIdAsync(`1)">
            <summary>
            Attempts to get a specific entity from the data store by its unique identity value.
            </summary>
            <param name="id">The unique identity value of the entity.</param>
            <returns>A task representing the operation. Upon completion, it will contain
            the entity that has the given unique identity value,
            or <c>null</c> if the specified entity was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Data.IAsyncRepository`2">
            <inheritdoc />
            <summary>
            Defines a mechanism that can be used to asynchronously store entities in a data store
            and query them back out again.
            </summary>
        </member>
        <member name="T:OnionSeed.Data.IAsyncUnitOfWork">
            <summary>
            Defines an atomic transaction whose changes are to be asynchronously committed as a collective whole.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.IAsyncUnitOfWork.CommitAsync">
            <summary>
            Commits any pending changes.
            </summary>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="T:OnionSeed.Data.ICommandService`2">
            <summary>
            Defines a mechanism that can be used to update entities in a data store.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.ICommandService`2.Add(`0)">
            <summary>
            Adds an entity to the data store.
            </summary>
            <param name="item">The entity to be added to the data store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> was not assigned a unique identity value.</exception>
            <exception cref="T:System.ArgumentException">The data store already contains an entity with a matching unique identity value.</exception>
        </member>
        <member name="M:OnionSeed.Data.ICommandService`2.AddOrUpdate(`0)">
            <summary>
            Adds an entity to the data store, or updates it if it already exists in the data store.
            </summary>
            <param name="item">The entity to be added to or updated in the data store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> was not assigned a unique identity value.</exception>
        </member>
        <member name="M:OnionSeed.Data.ICommandService`2.Update(`0)">
            <summary>
            Updates the specified entity in the data store.
            </summary>
            <param name="item">The entity to be updated in the data store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The specified entity was not found in the data store.</exception>
        </member>
        <member name="M:OnionSeed.Data.ICommandService`2.Remove(`0)">
            <summary>
            Removes the given entity from the data store.
            </summary>
            <param name="item">The entity to be removed from the data store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
            <remarks>If the given entity is not found in the data store, this method is a no-op.</remarks>
        </member>
        <member name="M:OnionSeed.Data.ICommandService`2.Remove(`1)">
            <summary>
            Removes the specified entity from the data store.
            </summary>
            <param name="id">The unique identity value of the entity to be removed from the data store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
            <remarks>If the specified entity is not found in the data store, this method is a no-op.</remarks>
        </member>
        <member name="M:OnionSeed.Data.ICommandService`2.TryAdd(`0)">
            <summary>
            Attempts to add an entity to the data store.
            </summary>
            <param name="item">The entity to be added to the data store.</param>
            <returns><c>true</c> if the entity was added successfully; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
        </member>
        <member name="M:OnionSeed.Data.ICommandService`2.TryUpdate(`0)">
            <summary>
            Attempts to update the specified entity in the data store.
            </summary>
            <param name="item">The entity to be updated in the data store.</param>
            <returns><c>true</c> if the entity was updated successfully; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
        </member>
        <member name="M:OnionSeed.Data.ICommandService`2.TryRemove(`0)">
            <summary>
            Attempts to remove the given entity from the data store.
            </summary>
            <param name="item">The entity to be removed from the data store.</param>
            <returns><c>true</c> if the entity was removed successfully, or <c>false</c> if it was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is <c>null</c>.
            -or- <paramref name="item"/> has a <c>null</c> unique identity value.</exception>
            <remarks>If the given entity is not found in the data store, this method is a no-op.</remarks>
        </member>
        <member name="M:OnionSeed.Data.ICommandService`2.TryRemove(`1)">
            <summary>
            Attempts to remove the specified entity from the data store.
            </summary>
            <param name="id">The unique identity value of the entity to be removed from the data store.</param>
            <returns><c>true</c> if the entity was removed successfully, or <c>false</c> if it was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
            <remarks>If the specified entity is not found in the data store, this method is a no-op.</remarks>
        </member>
        <member name="T:OnionSeed.Data.IEntity`1">
            <summary>
            Defines an object that is not fundamentally identified by its attributes, but rather by a unique identity value.
            </summary>
            <typeparam name="TIdentity">The type of the unique identity value.</typeparam>
            <remarks>Entities are not defined primarily by their attributes.
            They represent a thread of identity that runs through time and often across distinct representations.
            Sometimes an entity must be matched with another entity even though their attributes differ.
            Sometimes an entity must be distinguished from other entities even though their attributes are the same.
            Mistaken identity in these cases can lead to data corruption; thus, a unique identity value is created
            for the entity so it can be tracked regardless of the state of its attributes.</remarks>
        </member>
        <member name="P:OnionSeed.Data.IEntity`1.Id">
            <summary>
            Gets the unique identity value.
            </summary>
        </member>
        <member name="T:OnionSeed.Data.IQueryService`2">
            <summary>
            Defines a mechanism that can be used to query entities from a data store.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
        </member>
        <member name="M:OnionSeed.Data.IQueryService`2.GetCount">
            <summary>
            Gets the number of entities in the data store.
            </summary>
            <returns>The number of entities in the data store.</returns>
        </member>
        <member name="M:OnionSeed.Data.IQueryService`2.GetAll">
            <summary>
            Begins an enumeration of all entities in the data store.
            </summary>
            <returns>An enumeration of all entities in the data store.</returns>
        </member>
        <member name="M:OnionSeed.Data.IQueryService`2.GetById(`1)">
            <summary>
            Gets a specific entity from the data store by its unique identity value.
            </summary>
            <param name="id">The unique identity value of the entity.</param>
            <returns>The entity that has the given unique identity value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The specified unique identity value does not exist in the data store.</exception>
        </member>
        <member name="M:OnionSeed.Data.IQueryService`2.TryGetById(`1,`0@)">
            <summary>
            Attempts to get a specific entity from the data store by its unique identity value.
            </summary>
            <param name="id">The unique identity value of the entity.</param>
            <param name="result">When this method returns, contains the entity that has the given unique identity value,
            or <c>null</c> if the specified entity was not found. This parameter is passed uninitialized;
            any value originally supplied in <paramref name="result"/> will be overwritten.</param>
            <returns><c>true</c> if the specified entity was found; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Data.IRepository`2">
            <inheritdoc />
            <summary>
            Defines a mechanism that can be used to store entities in a data store
            and query them back out again.
            </summary>
        </member>
        <member name="T:OnionSeed.Data.IUnitOfWork">
            <summary>
            Defines an atomic transaction whose changes are to be committed as a collective whole.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.IUnitOfWork.Commit">
            <summary>
            Commits any pending changes.
            </summary>
        </member>
        <member name="T:OnionSeed.Data.IWritableEntity`1">
            <inheritdoc />
            <summary>
            Represents an entity in a state where it's unique identity value can be set
            (for example, when creating a new instance or re-hydrating an instance from a data store).
            </summary>
        </member>
        <member name="P:OnionSeed.Data.IWritableEntity`1.Id">
            <summary>
            Gets or sets the unique identity value.
            </summary>
        </member>
        <member name="T:OnionSeed.Data.QueryServiceExtensions">
            <summary>
            Contains extension methods for <see cref="T:OnionSeed.Data.IQueryService`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.QueryServiceExtensions.Catch``3(OnionSeed.Data.IQueryService{``0,``1},System.Func{``2,System.Boolean})">
            <summary>
            Wraps the given <see cref="T:OnionSeed.Data.IQueryService`2"/> in a <see cref="T:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3"/>.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
            <param name="inner">The <see cref="T:OnionSeed.Data.IQueryService`2"/> to be wrapped.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <returns>A new <see cref="T:OnionSeed.Data.Decorators.QueryServiceExceptionHandlerDecorator`3"/> wrapping the given <see cref="T:OnionSeed.Data.IQueryService`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Data.RepositoryExtensions">
            <summary>
            Contains extension methods for <see cref="T:OnionSeed.Data.IRepository`2"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.RepositoryExtensions.Catch``3(OnionSeed.Data.IRepository{``0,``1},System.Func{``2,System.Boolean})">
            <summary>
            Wraps the given <see cref="T:OnionSeed.Data.IRepository`2"/> in a <see cref="T:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3"/>.
            </summary>
            <typeparam name="TEntity">The type of entities in the data store.</typeparam>
            <typeparam name="TIdentity">The type of the unique identity value of the entities in the data store.</typeparam>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
            <param name="inner">The <see cref="T:OnionSeed.Data.IRepository`2"/> to be wrapped.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <returns>A new <see cref="T:OnionSeed.Data.Decorators.RepositoryExceptionHandlerDecorator`3"/> wrapping the given <see cref="T:OnionSeed.Data.IRepository`2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
        <member name="T:OnionSeed.Data.UnitOfWorkExtensions">
            <summary>
            Contains extension methods for <see cref="T:OnionSeed.Data.IUnitOfWork"/>.
            </summary>
        </member>
        <member name="M:OnionSeed.Data.UnitOfWorkExtensions.Catch``1(OnionSeed.Data.IUnitOfWork,System.Func{``0,System.Boolean})">
            <summary>
            Wraps the given <see cref="T:OnionSeed.Data.IUnitOfWork"/> in a <see cref="T:OnionSeed.Data.Decorators.UnitOfWorkExceptionHandlerDecorator`1"/>.
            </summary>
            <typeparam name="TException">"The type of exception to be handled.</typeparam>
            <param name="inner">The <see cref="T:OnionSeed.Data.IUnitOfWork"/> to be wrapped.</param>
            <param name="handler">The handler that will be called when an exception is caught.
            This delegate must return a flag indicating if the exception was handled.
            If it wasn't, it will be re-thrown after processing.</param>
            <returns>A new <see cref="T:OnionSeed.Data.Decorators.UnitOfWorkExceptionHandlerDecorator`1"/> wrapping the given <see cref="T:OnionSeed.Data.IUnitOfWork"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="inner"/> is <c>null</c>.
            -or- <paramref name="handler"/> is <c>null</c>.</exception>
        </member>
    </members>
</doc>
