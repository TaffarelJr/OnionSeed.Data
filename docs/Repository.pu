@startuml Repository

!define NamespaceColor #White

title Repository Pattern

node "Custom App" as App #Orange {
	namespace Domain NamespaceColor {
		class Car {
			+ Id : Guid {get; set;}
			+ Name : string {get; set;}
			+ Model : string {get; set;}
			+ Vin : string {get; set;}
			+ Color : Color {get; set;}
		}

		interface ICar {
			Name : string {get;}
			Model : string {get;}
			Vin : string {get;}
			Color : Color {get;}
		}
	}

	namespace DomainServices NamespaceColor {
		class CarRepository

		interface ICarRepository {
			GetByName(string value) : IEnumerable<ICar>
			GetByModelAsync(string value) : Task<IEnumerable<ICar>>
			GetByVinAsync(string value) : Task<ICar>
			Paint(ICar car, Color color)
		}
	}
}

node "OnionSeed.Data.SqlServer.dll" as SqlServer #LightGreen {
	abstract class SqlRepository<TEntity,TIdentity> {
		+ ctor(SqlConnection connection)
	}
}

node "OnionSeed.Data.dll" as OnionSeed #LightBlue {
	interface IRepository<TEntity,TIdentity> {
		AddAsync(TEntity item) : Task
		AddOrUpdateAsync(TEntity item) : Task
		UpdateAsync(TEntity item) : Task
		RemoveAsync(TEntity item) : Task
		RemoveAsync(TIdentity id) : Task
		TryAddAsync(TEntity item) : Task<bool>
		TryUpdateAsync(TEntity item) : Task<bool>
		TryRemoveAsync(TEntity item) : Task<bool>
		TryRemoveAsync(TIdentity id) : Task<bool>
	}

	interface IQueryService<TEntity,TIdentity> {
		GetCountAsync() : Task<long>
		GetAllAsync() : Task<IEnumerable<TEntity>>
		GetByIdAsync(TIdentity id) : Task<TEntity>
		TryGetByIdAsync(TIdentity id) : Task<TEntity>
	}

	interface IEntity<TIdentity> {
		Id : TIdentity {get;}
	}
}

note left of SqlRepository
	Provides base implementations
	of the <i>IRepository</i> and <i>IQueryService</i>
	interfaces, specifically targeting
	SQL Server. These base classes
	are to be extended by applications.
end note

SqlRepository <|- DomainServices.CarRepository : extends\n<i><Car, Guid></i>
SqlRepository ...|> IRepository : implements

DomainServices.CarRepository o. Domain.Car : actually contains
DomainServices.CarRepository ..|> DomainServices.ICarRepository : implements

Domain.Car ..|> Domain.ICar : implements

DomainServices.ICarRepository o- Domain.ICar : contains
DomainServices.ICarRepository --|> IRepository : extends\n<i><ICar, Guid></i>

Domain.ICar --|> IEntity : extends\n<i><Guid></i>

IRepository -|> IQueryService : extends

IQueryService o- IEntity : contains

note top of DomainServices.CarRepository
	<i>ICarRepository</i> can extend <i>IRepository</i> or <i>IQueryService</i>
	as needed, and the <i>SqlRepository</i> base class provides
	default implementations for all that functionality.

	Because of this, <i>ICarRepository</i> and <i>CarRepository</i> only
	need to define and implement custom queries and operations,
	as the default operations are handled for them.
end note

note right of Domain.Car
	<i>Car</i> is built to address specific
	implementation requiremets for
	things like serialization or
	database persistance.
end note

note right of Domain.ICar
	<i>ICar</i> is what should largely be used
	in business logic, because it can
	enforce constraints better than a class.
	(Read-only properties, no constructor, etc.)
end note

note bottom of IRepository
	A <i>Repository</i> is an
	unordered collection
	of unique entities.

	There are both sync-
	and async- versions
	of this interface.
end note

note bottom of IQueryService
	A <i>QueryService</i> is
	only the "read-only"
	portion of a <i>Repository</i>.
	This separation helps 
	when implementing
	CQ(R)S patterns.

	There are both sync-
	and async- versions
	of this interface.
end note

note bottom of IQueryService
	<i>TEntity</i> is:
		<i>IEntity<TIdentity></i>
end note

note bottom of IEntity
	<i>TIdentity</i> is:
		<i>IEquatable<TIdentity></i>
		<i>IComparable<TIdentity></i>
end note

@enduml
